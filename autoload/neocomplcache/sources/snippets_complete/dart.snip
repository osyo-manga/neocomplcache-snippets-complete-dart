snippet main
    void
    main(){
    	${0}
    }

snippet     if
abbr        if () {}
    if (${1:/* condition */}) {
        ${0:/* code */}
    }
snippet else
    else {
        ${0}
    }

snippet elseif
    else if (${1:/* condition */}) {
        ${0}
    }

snippet     ifelse
abbr        if () {} else {}
    if (${1:condition}) {
        ${2}
    } else {
        ${3}
    }

snippet     for
abbr        for ( ; ; ) {}
    for (${1} = 0; $1 < ${2}; $1++) {
        ${0}
    }

snippet     For
abbr        for ( in ) {}
    for (${1} in ${2}) {
        ${0}
    }

snippet     while
abbr        while () {}
    while (${1:/* condition */}) {
        ${0:/* code */}
    }

snippet     do_while
alias       do
    do {
        ${0:/* code */}
    } while (${1:/* condition */});

snippet     switch
abbr        switch () {}
    switch (${1:expression}) {
        case ${2:expression}:
            ${0}
            break;
    }

snippet     case
abbr        case :
    case ${1:expression}:
        ${0}
        break;
    }

snippet     function
alias       func
abbr        func() {}
    ${1:void} ${2:func_name}(${3}) {
        ${0}
    }

snippet     Function
alias       Func
abbr        func() =>
    ${1:void} ${2:func_name}(${3}) => ${0}

snippet     try
abbr        try catch
    try {
        ${1}
    } catch (${2:exception}) {
        ${3}
    }

snippet     tryfinnaly
abbr        try finally
    try {
        ${1}
    } finally {
        ${2}
    }

snippet     trycatchfinnaly
abbr        try catch finnaly
    try {
        ${1}
    } catch (${2:exception}) {
        ${3}
    } finally {
        ${4}
    }

snippet     catch
abbr        catch
    catch (${1:exception}) {
        ${2}
    }

snippet     import
abbr        #import
    #import('${1:library_name}');

snippet     library
abbr        #library
    #library('${1:library_name}');

snippet     source
abbr        #source
    #source('${1:source_file}');

snippet     class
abbr        class {}
    class ${1:class_name} {
        ${0}
    }

snippet     classT
abbr        class <> {}
    class ${1:class_name}<${2:type_parameter}> {
        ${0}
    }

snippet     classextends
abbr        class extends {}
    class ${1:class_name} extends ${2:super_class} {
        ${0}
    }

snippet     classTextends
abbr        class <> extends {}
    class ${1:class_name}<${2:type_parameter}> extends ${3:super_class} {
        ${0}
    }

snippet     classimplements
abbr        class implements {}
    class ${1:class_name} implements ${2:interface} {
        ${0}
    }

snippet     classTimplements
abbr        class <> implements {}
    class ${1:class_name}<${2:type_parameter}> implements ${3:interface} {
        ${0}
    }

snippet     classextendsimplements
abbr        class extends implements {}
    class ${1:class_name} extends ${2:super_class} implements ${3:interface} {
        ${0}
    }

snippet     classTextendsimplements
abbr        class <> extends implements {}
    class ${1:class_name}<${2:type_parameter}> extends ${3:super_class} implements ${4:interface} {
        ${0}
    }

snippet     interface
abbr        interface {}
    interface ${1:interface_name} {
        ${0}
    }

snippet     interfaceT
abbr        interface <> {}
    interface ${1:interface_name}<${2:type_parameter}> {
        ${0}
    }

snippet     interfaceextends
abbr        interface extends {}
    interface ${1:interface_name} extends ${2:super_interface} {
        ${0}
    }

snippet     interfaceTextends
abbr        interface <> extends {}
    interface ${1:interface_name}<${2:type_parameter}> extends ${3:super_interface}{
        ${0}
    }

snippet     get
abbr        get () {}
    get ${1:getter_name}() {
        ${0}
    }

snippet     Get
abbr        get () => 
    get ${1:getter_name}() => ${0};

snippet     set
abbr        set () {}
    set ${1:setter_name}(${2:formal_parameter}) {
        ${0}
    }

snippet     Set
abbr        set () =>
    set ${1:setter_name}(${2:formal_parameter}) => ${0};

snippet     return
abbr        return ;
    return ${0};


